# Traffic Management Platform - Docker Compose Configuration
# Production-ready multi-service setup

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: traffic-management-platform:latest
    container_name: traffic-manager-app
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - DATABASE_PATH=/app/data/traffic_manager.db
    volumes:
      # Persistent database storage
      - ./data:/app/data
      # Persistent logs
      - ./logs:/app/logs
    networks:
      - traffic-net
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/v1/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "com.traffic-manager.service=app"
      - "com.traffic-manager.version=2.0.0"

  # Redis for caching and rate limiting (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: traffic-manager-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - traffic-net
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.traffic-manager.service=redis"

  # Nginx reverse proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: traffic-manager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - traffic-net
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.traffic-manager.service=nginx"

  # Prometheus for metrics (optional - monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: traffic-manager-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - traffic-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    labels:
      - "com.traffic-manager.service=prometheus"

  # Grafana for visualization (optional - monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: traffic-manager-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - traffic-net
    depends_on:
      - prometheus
    labels:
      - "com.traffic-manager.service=grafana"

networks:
  traffic-net:
    driver: bridge
    labels:
      - "com.traffic-manager.network=main"

volumes:
  redis-data:
    driver: local
    labels:
      - "com.traffic-manager.volume=redis"
  prometheus-data:
    driver: local
    labels:
      - "com.traffic-manager.volume=prometheus"
  grafana-data:
    driver: local
    labels:
      - "com.traffic-manager.volume=grafana"
