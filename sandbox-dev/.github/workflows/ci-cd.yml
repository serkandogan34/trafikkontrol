# Traffic Management Platform - CI/CD Pipeline
# Automated testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, genspark_ai_developer ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DOCKER_IMAGE: traffic-management-platform
  REGISTRY: ghcr.io

jobs:
  # Job 1: Lint and Test
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd sandbox-dev
          npm ci

      - name: Run linting
        run: |
          cd sandbox-dev
          npm run lint || echo "No lint script found, skipping..."

      - name: Run database tests
        run: |
          cd sandbox-dev
          node database/test-crud.js

      - name: Run core services tests
        run: |
          cd sandbox-dev
          node core/test-services.js

      - name: Check for security vulnerabilities
        run: |
          cd sandbox-dev
          npm audit --audit-level=moderate || true

  # Job 2: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sandbox-dev
          file: ./sandbox-dev/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/genspark_ai_developer' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.traffic-manager.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment script here
          # Example: SSH to staging server and pull latest image
          # ssh user@staging-server "docker pull ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }} && docker-compose up -d"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add smoke test commands here
          # Example: curl https://staging.traffic-manager.example.com/api/v1/health

      - name: Notify deployment
        run: |
          echo "‚úÖ Staging deployment successful!"

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://traffic-manager.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment script here
          # Example: SSH to production server and pull latest image
          # ssh user@prod-server "docker pull ${{ env.REGISTRY }}/${{ github.repository }}:main && docker-compose up -d"

      - name: Run smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          # Add smoke test commands here
          # Example: curl https://traffic-manager.example.com/api/v1/health

      - name: Notify deployment
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Job 6: Backup Database (scheduled)
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run backup script
        run: |
          echo "üíæ Running database backup..."
          # Add backup script here
          # Example: ssh user@server "cd /app && node scripts/backup.js"

      - name: Upload backup to storage
        run: |
          echo "‚òÅÔ∏è  Uploading backup to cloud storage..."
          # Add upload logic (AWS S3, Google Cloud Storage, etc.)

# Scheduled workflows
# Uncomment to enable scheduled backups
# on:
#   schedule:
#     - cron: '0 2 * * *'  # Daily at 2 AM UTC
